import {InfoRegistryPeriod} from 'runlify';
import {PrismaClient} from '@prisma/client';
import {Knex} from 'knex';
import {Client} from 'pg';
import {WorkerUtils} from 'graphile-worker';
import {AdditionalServices} from './AdditionalServices';
import {interfaces} from 'inversify/lib/interfaces/interfaces';
import {BaseServices} from './BaseServices';
import {KafkaContext} from '../../clients/kafka/getKafkaContext';
import {QueueTypes} from '../../clients/queue/jobsTypes';
import {ElasticClient} from '../../clients/elastic';
import {Logger} from '../../log';
import Entity from '../../types/Entity';
import IntegrationClients from './IntegrationClients';

export type Services = BaseServices & AdditionalServices;

export type Context = {
  prisma: PrismaClient;
  prismaReadOnly: PrismaClient;
  knex: Knex;
  postgres: Client;
  worker: WorkerUtils;
  elastic: ElasticClient;
  log: Logger;
  close: () => Promise<void>;
  service: <N extends keyof Services>(name: N) => Services[N];
  integrationClient: <N extends keyof IntegrationClients>(name: N) => IntegrationClients[N];
  container: interfaces.Container;
  kafka: KafkaContext;
  queue: QueueTypes;
};

export interface ServiceConfig {
  idType: 'string' | 'bigint' | 'int';
  autogeneratedStringId: boolean;
  auditable: boolean;
  entityTypeId: Entity; // used for auditable table
  withSearch: boolean;
  externalSearch: boolean;
  dateFields: string[];
  otherFields: string[];
  forbiddenForUserFields: string[];
}

export interface DocumentConfig extends ServiceConfig {
  registries: string[];
  registrarDependedRegistries: string[]; // for getPostOperation
  externalSearchDeps?: Partial<Record<string, string>>
}

export interface InfoRegistryConfig extends ServiceConfig {
  period: InfoRegistryPeriod;
}

type ServiceConstrictor<T extends keyof Services> = (context: Context) => Services[T];

export type BaseServiceConstrictors = {
  [K in keyof BaseServices] : ServiceConstrictor<K>
};

export type AdditionalServiceConstrictors = {
  [K in keyof AdditionalServices] : ServiceConstrictor<K>
};

export type IntegrationClientsConstrictors = {
  [K in keyof IntegrationClients] : (context: Context) => IntegrationClients[K]
};

export type ServiceConstrictors = BaseServiceConstrictors & AdditionalServiceConstrictors & IntegrationClientsConstrictors;
