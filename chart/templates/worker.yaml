
# DO NOT EDIT! THIS IS GENERATED FILE

{{- if $.Values.worker.enabled }}

{{- range $.Values.workers }}
apiVersion: v1
kind: Service
metadata:
  name: mtbase-{{ .name  }}-worker
  labels:
    app: mtbase-{{ .name  }}-worker
    projectName: {{ $.Values.global.projectName }}
    clusterName: {{ $.Values.global.clusterName }}
    env: {{ $.Values.global.env }}
    deployKind: {{ $.Values.global.deployKind }}
    prometheus: enable
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: mtbase-{{ .name  }}-worker
---
{{- end }}

{{- range $.Values.workers }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mtbase-{{ .name  }}-worker
spec:
  replicas: {{ default $.Values.worker.replicas .replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
  selector:
    matchLabels:
      app: mtbase-{{ .name  }}-worker
  template:
    metadata:
      labels:
        app: mtbase-{{ .name  }}-worker
        projectName: {{ $.Values.global.projectName }}
        clusterName: {{ $.Values.global.clusterName }}
        env: {{ $.Values.global.env }}
        deployKind: {{ $.Values.global.deployKind }}
    spec:
      imagePullSecrets:
        - name: {{ $.Release.Name }}-pullsecret
      containers:
      - name: mtbase-{{ .name  }}-worker
        image: {{ $.Values.dockerRegistry.domain }}/mtbase/mtbase-back{{ $.Values.app.tag }}
        command: ["node", "{{ .file  }}"]
        ports:
        - name: main-port
          containerPort: 3000
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /health?type=liveness
            port: main-port
          initialDelaySeconds: 60
          timeoutSeconds: 15
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health?type=readiness
            port: main-port
          initialDelaySeconds: 60
          timeoutSeconds: 15
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /health?type=startup
            port: main-port
          initialDelaySeconds: 60
          timeoutSeconds: 15
          failureThreshold: 10
          periodSeconds: 10
        resources:
          requests:
            memory: {{ (default $.Values.worker.requests .requests).memory }}
            cpu: {{ (default $.Values.worker.requests .requests).cpu }}
          limits:
            memory: {{ (default $.Values.worker.limits .limits).memory }}
            cpu: {{ (default $.Values.worker.limits .limits).cpu }}
        securityContext:
          runAsNonRoot: true
          # readOnlyRootFilesystem: true
          runAsUser: 1000
        env:
        - name: RANDOM
          value: {{ $.Values.random | quote }}
        - name: APP_NAME
          value: {{ $.Values.app.name | quote }}
        - name: APP_ENVIRONMENT
          value: {{ $.Values.app.environment | quote }}
        - name: ENV
          value: '{{ $.Values.global.env }}'
        - name: APOLLO_KEY
          value: {{ $.Values.apollo.key | quote }}
        - name: DATABASE_MAIN_MIGRATION_URI
          value: {{ $.Values.database.main.migration.uri | quote }}
        - name: DATABASE_MAIN_READ_ONLY_ENABLED
          value: {{ $.Values.database.main.readOnly.enabled | quote }}
        - name: DATABASE_MAIN_READ_ONLY_URI
          value: {{ $.Values.database.main.readOnly.uri | quote }}
        - name: DATABASE_MAIN_WRITE_URI
          value: {{ $.Values.database.main.write.uri | quote }}
        - name: LOGS_FORMAT
          value: {{ $.Values.logs.format | quote }}
        - name: LOKI_URL
          value: {{ $.Values.loki.url | quote }}

        - name: S3_ACCESS_KEY_ID
          value: {{ $.Values.s3.accessKeyId | quote }}
        - name: S3_BUCKET_EMAIL_FILES
          value: {{ $.Values.s3.bucket.emailFiles | quote }}
        - name: S3_BUCKET_TMP_FILES_TO_DOWNLOAD
          value: {{ $.Values.s3.bucket.tmpFilesToDownload | quote }}
        - name: S3_ENDPOINT
          value: {{ $.Values.s3.endpoint | quote }}
        - name: S3_PUBLIC_ENDPOINT
          value: {{ $.Values.s3.publicEndpoint | quote }}
        - name: S3_REGION
          value: {{ $.Values.s3.region | quote }}
        - name: S3_SECRET_ACCESS_KEY
          value: {{ $.Values.s3.secretAccessKey | quote }}

        - name: APP_URI
          value: {{ $.Values.app.prefix }}.{{ $.Values.ingress.host }}

        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
{{- end }}
{{- end }}