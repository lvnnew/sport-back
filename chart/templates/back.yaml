
# DO NOT EDIT! THIS IS GENERATED FILE

{{- if .Values.back.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: mtbase-back
  labels:
    app: mtbase-back
    projectName: {{ $.Values.global.projectName }}
    clusterName: {{ $.Values.global.clusterName }}
    env: {{ $.Values.global.env }}
    deployKind: {{ $.Values.global.deployKind }}
  annotations:
    prometheus.io/scrape: 'true'
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: mtbase-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mtbase-back
spec:
  replicas: {{ $.Values.app.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
  selector:
    matchLabels:
      app: mtbase-back
  template:
    metadata:
      labels:
        app: mtbase-back
        projectName: {{ $.Values.global.projectName }}
        clusterName: {{ $.Values.global.clusterName }}
        env: {{ $.Values.global.env }}
        deployKind: {{ $.Values.global.deployKind }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      containers:
      - name: mtbase-back
        image: {{ $.Values.docker.registry }}/mtbase-back{{ $.Values.app.tag }}
        ports:
        - name: main-port
          containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: NODE_ENV
          value: production
        - name: RANDOM
          value: {{ $.Values.random | quote }}
        - name: ENV
          value: '{{ $.Values.global.env }}'
        - name: APOLLO_KEY
          value: {{ $.Values.apollo.key | quote }}
        - name: ADM_JWT_SECRET
          value: {{ $.Values.adm.jwt.secret | quote }}
        - name: ADMIN_RECAPTCHA_REQUIRED_SCORE
          value: {{ $.Values.admin.recaptcha.requiredScore | quote }}
        - name: ADMIN_RECAPTCHA_SECRET_KEY
          value: {{ $.Values.admin.recaptcha.secretKey | quote }}
        - name: APP_ENVIRONMENT
          value: {{ $.Values.app.environment | quote }}
        - name: APP_JWT_SECRET
          value: {{ $.Values.app.jwt.secret | quote }}
        - name: APP_NAME
          value: {{ $.Values.app.name | quote }}
        - name: APP_TITLE
          value: {{ $.Values.app.title | quote }}
        - name: CUSTOMER_RECAPTCHA_REQUIRED_SCORE
          value: {{ $.Values.customer.recaptcha.requiredScore | quote }}
        - name: CUSTOMER_RECAPTCHA_SECRET_KEY
          value: {{ $.Values.customer.recaptcha.secretKey | quote }}
        - name: DATABASE_URI
          value: {{ $.Values.database.uri | quote }}
        - name: ES_CLOUD_ID
          value: {{ $.Values.es.cloudId | quote }}
        - name: ES_NODE
          value: {{ $.Values.es.node | quote }}
        - name: ES_PASSWORD
          value: {{ $.Values.es.password | quote }}
        - name: ES_TLS_REJECT_UNAUTHORIZED
          value: {{ $.Values.es.tls.rejectUnauthorized | quote }}
        - name: ES_USERNAME
          value: {{ $.Values.es.username | quote }}
        - name: GRAPHQL_PLAYGROUND_ENABLED
          value: {{ $.Values.graphql.playground.enabled | quote }}
        - name: KAFKA_BROKERS
          value: {{ $.Values.kafka.brokers | quote }}
        - name: KAFKA_ENABLED
          value: {{ $.Values.kafka.enabled | quote }}
        - name: KAFKA_PASSWORD
          value: {{ $.Values.kafka.password | quote }}
        - name: KAFKA_QUEUE_ACKS
          value: {{ $.Values.kafka.queue.acks | quote }}
        - name: KAFKA_QUEUE_DEFAULT_RETRY_TIME
          value: {{ $.Values.kafka.queue.defaultRetryTime | quote }}
        - name: KAFKA_QUEUE_MAX_ATTEMPTS_SIZE
          value: {{ $.Values.kafka.queue.maxAttemptsSize | quote }}
        - name: KAFKA_QUEUE_STACK_SIZE
          value: {{ $.Values.kafka.queue.stackSize | quote }}
        - name: KAFKA_QUEUE_SUPPORTED_VERSION
          value: {{ $.Values.kafka.queue.supportedVersion | quote }}
        - name: KAFKA_QUEUE_WAITING_INTERRUPT_TIME
          value: {{ $.Values.kafka.queue.waitingInterruptTime | quote }}
        - name: KAFKA_SSL_REJECT_UNAUTHORIZED
          value: {{ $.Values.kafka.ssl.rejectUnauthorized | quote }}
        - name: KAFKA_USERNAME
          value: {{ $.Values.kafka.username | quote }}
        - name: LOGS_FORMAT
          value: {{ $.Values.logs.format | quote }}
        - name: LOKI_URL
          value: {{ $.Values.loki.url | quote }}
        - name: S3_ACCESS_KEY_ID
          value: {{ $.Values.s3.accessKeyId | quote }}
        - name: S3_SECRET_ACCESS_KEY
          value: {{ $.Values.s3.secretAccessKey | quote }}
        - name: SMTP_FROM
          value: {{ $.Values.smtp.from | quote }}
        - name: SMTP_HOST
          value: {{ $.Values.smtp.host | quote }}
        - name: SMTP_PASS
          value: {{ $.Values.smtp.pass | quote }}
        - name: SMTP_PORT
          value: {{ $.Values.smtp.port | quote }}
        - name: SMTP_USER
          value: {{ $.Values.smtp.user | quote }}

        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        livenessProbe:
          httpGet:
            path: /health?type=liveness
            port: main-port
          initialDelaySeconds: 60
          timeoutSeconds: 15
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health?type=readiness
            port: main-port
          initialDelaySeconds: 60
          timeoutSeconds: 15
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /health?type=startup
            port: main-port
          initialDelaySeconds: 60
          timeoutSeconds: 15
          failureThreshold: 10
          periodSeconds: 10

        resources:
          requests:
            memory: {{ $.Values.back.requests.memory }}
            cpu: {{ $.Values.back.requests.cpu }}
          limits:
            memory: {{ $.Values.back.limits.memory }}
            cpu: {{ $.Values.back.limits.cpu }}

        securityContext:
          runAsNonRoot: true
          # readOnlyRootFilesystem: true
          runAsUser: 1000
---
{{- end }}
