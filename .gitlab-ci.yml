image: node:14
# DO NOT EDIT! THIS IS GENERATED FILE


stages:
  - check
  - build
  - latest-image
  - deploy-dev
  - deploy-demo

cache:
  paths:
    - .cache
    - .cache_images
    - node_modules

variables:
  REPO_NAME: $CI_PROJECT_NAME
  VERBOSE: 'true'
  RELEASE: $CI_COMMIT_SHORT_SHA
  KUBECONFIG: /etc/deploy/config
  APPNAME: back

check:
  stage: check
  image: registry.gitlab.com/making.ventures/images/prisma-cli
  before_script:
    - yarn
  script:
    - ./check

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # - /kaniko/warmer --cache-dir=$CI_PROJECT_DIR/.cache_images --image=browserless/chrome
  script:
    - /kaniko/executor
      --cache-dir=$CI_PROJECT_DIR/.cache_images
      --context ${CI_PROJECT_DIR}
      --dockerfile ${CI_PROJECT_DIR}/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}:$CI_COMMIT_REF_SLUG
      --single-snapshot
  only:
    - master
    - release
    - /^release-.*$/
    - demo

master-to-latest:
  extends: .tag-image
  stage: latest-image
  only:
    - master
  variables:
    TAG_ORIGIN: master
    TAG_DESTINATION: latest

.tag-image:
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane cp ${CI_REGISTRY_IMAGE}:${TAG_ORIGIN} ${CI_REGISTRY_IMAGE}:${TAG_DESTINATION}
  variables:
    GIT_STRATEGY: none

deploy-dev:
  extends: .deploy-dev
  stage: deploy-dev
  variables:
    ENV: "dev"
    ENV_NAME: "dev01"

deploy-demo:
  extends: .deploy-prod
  stage: deploy-demo
  variables:
    ENV: "demo"
    ENV_NAME: "demo01"
    TAG: ":demo"
  only:
    - demo
deploy-dev-workers:
  extends: .deploy-dev-workers
  stage: deploy-dev
  variables:
    ENV: "dev"
    ENV_NAME: "workers01"

.deploy-dev-back:
  extends: .deploy-dev
  variables:
    KUBE_CONFIG: ${KUBE_STAGE01_CONFIG}
    BACK_ENABLED: "true"
    INGRESS_ENABLED: "true"
    METRICS_ENABLED: "true"
    WORKER_ENABLED: "false"
    ROOT_ENABLED: "false"

.deploy-dev-workers:
  extends: .deploy-dev
  variables:
    KUBE_CONFIG: ${KUBE_WORKERS01_CONFIG}
    APPNAME: workers
    BACK_ENABLED: "false"
    INGRESS_ENABLED: "false"
    METRICS_ENABLED: "false"
    WORKER_ENABLED: "true"
    TIKA_ENABLED: "false"
    TIKA_INGRESS_ENABLED: "false"
    ROOT_ENABLED: "false"
  only:
    - master

.deploy-prod-back:
  extends: .deploy-prod
  variables:
    KUBE_CONFIG: ${KUBE_PROD01_CONFIG}
    BACK_ENABLED: "true"
    INGRESS_ENABLED: "true"
    METRICS_ENABLED: "true"
    WORKER_ENABLED: "false"
    ROOT_ENABLED: "false"

.deploy-prod-workers:
  extends: .deploy-prod
  variables:
    KUBE_CONFIG: ${KUBE_WORKERS01_CONFIG}
    APPNAME: workers
    BACK_ENABLED: "false"
    INGRESS_ENABLED: "false"
    METRICS_ENABLED: "false"
    WORKER_ENABLED: "true"
    TIKA_ENABLED: "false"
    TIKA_INGRESS_ENABLED: "false"
    ROOT_ENABLED: "false"

.deploy-dev:
  extends: .deploy
  variables:
    DEV: "true"
    HOST: "making.ventures"
    TAG: ":latest"
    PG_URI: ${AGR_DEV_PG_URI}

.deploy-prod:
  extends: .deploy
  stage: deploy-prod
  when: manual
  variables:
    DEV: "false"
    HOST: "making.ventures"
    TAG: ":latest"
    PG_URI: ${AGR_PROD_PG_URI}
  only:
    - master

.deploy:
  image:
    name: alpine/helm:3.1.2
    entrypoint: [""]
  before_script:
    - mkdir -p /etc/deploy
    - echo ${KUBE_CONFIG} | base64 -d > ${KUBECONFIG}
  script:
    - NAMESPACE=${NAMESPACE:-"agr-${ENV}"}
    - echo NAMESPACE ${NAMESPACE}

    - helm upgrade
      --install
      --wait ${NAMESPACE}-${APPNAME} chart
      --timeout 3600s
      --set "global.envName=${ENV_NAME}"
      --set "global.env=${ENV}"
      --set "random=:$(date)"
      --set "app.tag=${TAG}"
      --set "ingress.host=${HOST}"
      --set "style=${STYLE}"
      --set "database.uri=${PG_URI}"
      --set "s3.accessKeyId=${AGR_S3_ACCESS_KEY_ID}"
      --set "s3.secretAccessKey=${AGR_S3_SECRET_ACCESS_KEY}"
      --set "smtp.host=${AGR_SMTP_HOST}"
      --set "smtp.port=${AGR_SMTP_PORT}"
      --set "smtp.user=${AGR_SMTP_USER}"
      --set "smtp.pass=${AGR_SMTP_PASS}"
      --set "smtp.from=${AGR_SMTP_FROM}"
      --set "back.enabled=${BACK_ENABLED}"
      --set "ingress.enabled=${INGRESS_ENABLED}"
      --set "metrics.enabled=${METRICS_ENABLED}"
      --set "worker.enabled=${WORKER_ENABLED}"
      --set "ingress.rootEnabled=${ROOT_ENABLED}"
      --namespace ${NAMESPACE}
