image: node:16

# DO NOT EDIT! THIS IS GENERATED FILE

stages:
  - check
  - build
  - latest-image
  - deploy-stage
  - deploy-prod

cache:
  paths:
    - .cache
    - .cache_images
    # - node_modules

variables:
  REPO_NAME: $CI_PROJECT_NAME
  VERBOSE: 'true'
  RELEASE: $CI_COMMIT_SHORT_SHA
  KUBECONFIG: /etc/deploy/config
  PROJECT_NAME: mtbase

check:
  stage: check
  image: registry.gitlab.com/making.ventures/images/node-with-tools
  before_script:
    - yarn install --frozen-lockfile
  script:
    - ./check.sh
  variables:
    DATABASE_URI: $TEST_DATABASE_URI

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # - /kaniko/warmer --cache-dir=$CI_PROJECT_DIR/.cache_images --image=browserless/chrome
  script:
    - /kaniko/executor
      --cache-dir=$CI_PROJECT_DIR/.cache_images
      --context ${CI_PROJECT_DIR}
      --dockerfile ${CI_PROJECT_DIR}/Dockerfile
      --destination ${CI_REGISTRY_IMAGE}:$CI_COMMIT_REF_SLUG
      --single-snapshot
  only:
    - master
    - release
    - /^release-.*$/

master-to-latest:
  extends: .tag-image
  stage: latest-image
  only:
    - master
  variables:
    TAG_ORIGIN: master
    TAG_DESTINATION: latest

.tag-image:
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane cp ${CI_REGISTRY_IMAGE}:${TAG_ORIGIN} ${CI_REGISTRY_IMAGE}:${TAG_DESTINATION}
  variables:
    GIT_STRATEGY: none

deploy-stage-back:
  extends: .deploy-dev-back
  stage: deploy-stage
  variables:
    ENV: "stage"
    CLUSTER_NAME: "stage01"

deploy-prod-back:
  extends: .deploy-prod-back
  stage: deploy-prod
  variables:
    ENV: "prod"
    CLUSTER_NAME: "stage01"

.deploy-dev-back:
  extends:
    - .deploy-dev
    - .deploy-back
  variables:
    KUBE_CONFIG: ${KUBE_STAGE01_CONFIG}
    BACK_ENABLED: "true"
    INGRESS_ENABLED: "true"
    METRICS_ENABLED: "true"
    WORKER_ENABLED: "false"
    BOT_ENABLED: "false"
    ROOT_ENABLED: "false"

.deploy-dev-workers:
  extends:
    - .deploy-dev
    - .deploy-worker
  variables:
    KUBE_CONFIG: ${KUBE_WORKERS01_CONFIG}
    BACK_ENABLED: "false"
    INGRESS_ENABLED: "false"
    METRICS_ENABLED: "false"
    WORKER_ENABLED: "true"
    BOT_ENABLED: "true"
    ROOT_ENABLED: "false"
  only:
    - master

.deploy-prod-back:
  extends:
    - .deploy-prod
    - .deploy-back
  variables:
    KUBE_CONFIG: ${KUBE_PROD01_CONFIG}
    BACK_ENABLED: "true"
    INGRESS_ENABLED: "true"
    METRICS_ENABLED: "true"
    WORKER_ENABLED: "false"
    BOT_ENABLED: "false"
    ROOT_ENABLED: "false"

.deploy-prod-workers:
  extends:
    - .deploy-prod
    - .deploy-worker
  variables:
    KUBE_CONFIG: ${KUBE_WORKERS01_CONFIG}
    BACK_ENABLED: "false"
    INGRESS_ENABLED: "false"
    METRICS_ENABLED: "false"
    WORKER_ENABLED: "true"
    BOT_ENABLED: "true"
    ROOT_ENABLED: "false"

.deploy-dev:
  extends: .deploy
  variables:
    ENV: "stage"
    DEV: "true"
    HOST: "making.ventures"
    ROOT_ENABLED: "false"
    TAG: ":latest"
    ADM_JWT_SECRET: ${DEV_ADM_JWT_SECRET}
    ADMIN_RECAPTCHA_REQUIRED_SCORE: ${DEV_ADMIN_RECAPTCHA_REQUIRED_SCORE}
    ADMIN_RECAPTCHA_SECRET_KEY: ${DEV_ADMIN_RECAPTCHA_SECRET_KEY}
    APP_ENVIRONMENT: ${DEV_APP_ENVIRONMENT}
    APP_JWT_SECRET: ${DEV_APP_JWT_SECRET}
    APP_NAME: ${DEV_APP_NAME}
    APP_TITLE: ${DEV_APP_TITLE}
    CUSTOMER_RECAPTCHA_REQUIRED_SCORE: ${DEV_CUSTOMER_RECAPTCHA_REQUIRED_SCORE}
    CUSTOMER_RECAPTCHA_SECRET_KEY: ${DEV_CUSTOMER_RECAPTCHA_SECRET_KEY}
    DATABASE_URI: ${DEV_DATABASE_URI}
    GRAPHQL_PLAYGROUND_ENABLED: ${DEV_GRAPHQL_PLAYGROUND_ENABLED}
    KAFKA_BROKERS: ${DEV_KAFKA_BROKERS}
    KAFKA_ENABLED: ${DEV_KAFKA_ENABLED}
    KAFKA_PASSWORD: ${DEV_KAFKA_PASSWORD}
    KAFKA_QUEUE_ACKS: ${DEV_KAFKA_QUEUE_ACKS}
    KAFKA_QUEUE_AUTO_COMMIT_INTERVAL: ${DEV_KAFKA_QUEUE_AUTO_COMMIT_INTERVAL}
    KAFKA_QUEUE_AUTO_COMMIT_THRESHOLD: ${DEV_KAFKA_QUEUE_AUTO_COMMIT_THRESHOLD}
    KAFKA_QUEUE_DEFAULT_RETRY_TIME: ${DEV_KAFKA_QUEUE_DEFAULT_RETRY_TIME}
    KAFKA_QUEUE_MAX_ATTEMPTS_SIZE: ${DEV_KAFKA_QUEUE_MAX_ATTEMPTS_SIZE}
    KAFKA_QUEUE_STACK_SIZE: ${DEV_KAFKA_QUEUE_STACK_SIZE}
    KAFKA_QUEUE_SUPPORTED_VERSION: ${DEV_KAFKA_QUEUE_SUPPORTED_VERSION}
    KAFKA_QUEUE_WAITING_INTERRUPT_TIME: ${DEV_KAFKA_QUEUE_WAITING_INTERRUPT_TIME}
    KAFKA_SSL_REJECT_UNAUTHORIZED: ${DEV_KAFKA_SSL_REJECT_UNAUTHORIZED}
    KAFKA_USERNAME: ${DEV_KAFKA_USERNAME}
    LOGS_FORMAT: ${DEV_LOGS_FORMAT}
    LOKI_URL: ${DEV_LOKI_URL}
    S3_ACCESS_KEY_ID: ${DEV_S3_ACCESS_KEY_ID}
    S3_SECRET_ACCESS_KEY: ${DEV_S3_SECRET_ACCESS_KEY}
    SMTP_FROM: ${DEV_SMTP_FROM}
    SMTP_HOST: ${DEV_SMTP_HOST}
    SMTP_PASS: ${DEV_SMTP_PASS}
    SMTP_PORT: ${DEV_SMTP_PORT}
    SMTP_USER: ${DEV_SMTP_USER}
    APP_ENVIRONMENT: dev
  only:
    - master

.deploy-prod:
  extends: .deploy
  stage: deploy-prod
  when: manual
  variables:
    ENV: "prod"
    DEV: "false"
    HOST: "making.ventures"
    ROOT_ENABLED: "true"
    TAG: ":release"
    ADM_JWT_SECRET: ${PROD_ADM_JWT_SECRET}
    ADMIN_RECAPTCHA_REQUIRED_SCORE: ${PROD_ADMIN_RECAPTCHA_REQUIRED_SCORE}
    ADMIN_RECAPTCHA_SECRET_KEY: ${PROD_ADMIN_RECAPTCHA_SECRET_KEY}
    APP_ENVIRONMENT: ${PROD_APP_ENVIRONMENT}
    APP_JWT_SECRET: ${PROD_APP_JWT_SECRET}
    APP_NAME: ${PROD_APP_NAME}
    APP_TITLE: ${PROD_APP_TITLE}
    CUSTOMER_RECAPTCHA_REQUIRED_SCORE: ${PROD_CUSTOMER_RECAPTCHA_REQUIRED_SCORE}
    CUSTOMER_RECAPTCHA_SECRET_KEY: ${PROD_CUSTOMER_RECAPTCHA_SECRET_KEY}
    DATABASE_URI: ${PROD_DATABASE_URI}
    GRAPHQL_PLAYGROUND_ENABLED: ${PROD_GRAPHQL_PLAYGROUND_ENABLED}
    KAFKA_BROKERS: ${PROD_KAFKA_BROKERS}
    KAFKA_ENABLED: ${PROD_KAFKA_ENABLED}
    KAFKA_PASSWORD: ${PROD_KAFKA_PASSWORD}
    KAFKA_QUEUE_ACKS: ${PROD_KAFKA_QUEUE_ACKS}
    KAFKA_QUEUE_AUTO_COMMIT_INTERVAL: ${PROD_KAFKA_QUEUE_AUTO_COMMIT_INTERVAL}
    KAFKA_QUEUE_AUTO_COMMIT_THRESHOLD: ${PROD_KAFKA_QUEUE_AUTO_COMMIT_THRESHOLD}
    KAFKA_QUEUE_DEFAULT_RETRY_TIME: ${PROD_KAFKA_QUEUE_DEFAULT_RETRY_TIME}
    KAFKA_QUEUE_MAX_ATTEMPTS_SIZE: ${PROD_KAFKA_QUEUE_MAX_ATTEMPTS_SIZE}
    KAFKA_QUEUE_STACK_SIZE: ${PROD_KAFKA_QUEUE_STACK_SIZE}
    KAFKA_QUEUE_SUPPORTED_VERSION: ${PROD_KAFKA_QUEUE_SUPPORTED_VERSION}
    KAFKA_QUEUE_WAITING_INTERRUPT_TIME: ${PROD_KAFKA_QUEUE_WAITING_INTERRUPT_TIME}
    KAFKA_SSL_REJECT_UNAUTHORIZED: ${PROD_KAFKA_SSL_REJECT_UNAUTHORIZED}
    KAFKA_USERNAME: ${PROD_KAFKA_USERNAME}
    LOGS_FORMAT: ${PROD_LOGS_FORMAT}
    LOKI_URL: ${PROD_LOKI_URL}
    S3_ACCESS_KEY_ID: ${PROD_S3_ACCESS_KEY_ID}
    S3_SECRET_ACCESS_KEY: ${PROD_S3_SECRET_ACCESS_KEY}
    SMTP_FROM: ${PROD_SMTP_FROM}
    SMTP_HOST: ${PROD_SMTP_HOST}
    SMTP_PASS: ${PROD_SMTP_PASS}
    SMTP_PORT: ${PROD_SMTP_PORT}
    SMTP_USER: ${PROD_SMTP_USER}
    APP_ENVIRONMENT: prod
  only:
    - release
    - /^release-.*$/

.deploy-back:
  variables:
    DEPLOY_KIND: "back"
    APP_NAME: back

.deploy-worker:
  variables:
    DEPLOY_KIND: "worker"
    APP_NAME: worker

.deploy-telegramBot:
  variables:
    DEPLOY_KIND: "telegramBot"

.deploy:
  image:
    name: alpine/helm:3.9.0
    entrypoint: [""]
  before_script:
    - mkdir -p /etc/deploy
    - echo ${KUBE_CONFIG} | base64 -d > ${KUBECONFIG}
  script:
    - NAMESPACE=${NAMESPACE:-"mtbase-${ENV}"}
    - echo NAMESPACE ${NAMESPACE}
    - echo chart ${NAMESPACE}-${DEPLOY_KIND}

    - helm upgrade
      --install
      --wait ${NAMESPACE}-${DEPLOY_KIND} chart
      --timeout 3600s
      -f chart/values_${ENV}.yaml
      --set "global.projectName=${PROJECT_NAME}"
      --set "global.clusterName=${CLUSTER_NAME}"
      --set "global.env=${ENV}"
      --set "global.deployKind=${DEPLOY_KIND}"
      --set "random=:$(date)"
      --set "app.tag=${TAG}"
      --set "ingress.host=${HOST}"
      --set "style=${STYLE}"
      --set "back.enabled=${BACK_ENABLED}"
      --set "ingress.enabled=${INGRESS_ENABLED}"
      --set "metrics.enabled=${METRICS_ENABLED}"
      --set "worker.enabled=${WORKER_ENABLED}"
      --set "bot.enabled=${BOT_ENABLED}"
      --set "ingress.rootEnabled=${ROOT_ENABLED}"
      --set "adm.jwt.secret=${ADM_JWT_SECRET}"
      --set "admin.recaptcha.requiredScore=${ADMIN_RECAPTCHA_REQUIRED_SCORE}"
      --set "admin.recaptcha.secretKey=${ADMIN_RECAPTCHA_SECRET_KEY}"
      --set "app.environment=${APP_ENVIRONMENT}"
      --set "app.jwt.secret=${APP_JWT_SECRET}"
      --set "app.name=${APP_NAME}"
      --set "app.title=${APP_TITLE}"
      --set "customer.recaptcha.requiredScore=${CUSTOMER_RECAPTCHA_REQUIRED_SCORE}"
      --set "customer.recaptcha.secretKey=${CUSTOMER_RECAPTCHA_SECRET_KEY}"
      --set "database.uri=${DATABASE_URI}"
      --set "graphql.playground.enabled=${GRAPHQL_PLAYGROUND_ENABLED}"
      --set "kafka.brokers=${KAFKA_BROKERS}"
      --set "kafka.enabled=${KAFKA_ENABLED}"
      --set "kafka.password=${KAFKA_PASSWORD}"
      --set "kafka.queue.acks=${KAFKA_QUEUE_ACKS}"
      --set "kafka.queue.autoCommitInterval=${KAFKA_QUEUE_AUTO_COMMIT_INTERVAL}"
      --set "kafka.queue.autoCommitThreshold=${KAFKA_QUEUE_AUTO_COMMIT_THRESHOLD}"
      --set "kafka.queue.defaultRetryTime=${KAFKA_QUEUE_DEFAULT_RETRY_TIME}"
      --set "kafka.queue.maxAttemptsSize=${KAFKA_QUEUE_MAX_ATTEMPTS_SIZE}"
      --set "kafka.queue.stackSize=${KAFKA_QUEUE_STACK_SIZE}"
      --set "kafka.queue.supportedVersion=${KAFKA_QUEUE_SUPPORTED_VERSION}"
      --set "kafka.queue.waitingInterruptTime=${KAFKA_QUEUE_WAITING_INTERRUPT_TIME}"
      --set "kafka.ssl.rejectUnauthorized=${KAFKA_SSL_REJECT_UNAUTHORIZED}"
      --set "kafka.username=${KAFKA_USERNAME}"
      --set "logs.format=${LOGS_FORMAT}"
      --set "loki.url=${LOKI_URL}"
      --set "s3.accessKeyId=${S3_ACCESS_KEY_ID}"
      --set "s3.secretAccessKey=${S3_SECRET_ACCESS_KEY}"
      --set "smtp.from=${SMTP_FROM}"
      --set "smtp.host=${SMTP_HOST}"
      --set "smtp.pass=${SMTP_PASS}"
      --set "smtp.port=${SMTP_PORT}"
      --set "smtp.user=${SMTP_USER}"
      --namespace ${NAMESPACE}
