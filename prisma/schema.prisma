generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model AuditLog {
	id	Int	@default(autoincrement())	@id
	search	String?
	date	DateTime	@db.Date
	title	String
	entityType	String
	entityId	String
	action	String
	managerId	Int?
	manager	Manager?	@relation("From-AuditLog.manager", fields: [managerId], references: [id])
	userId	Int?
	user	User?	@relation("From-AuditLog.user", fields: [userId], references: [id])
	foreign	Boolean?
	foreignEntityType	String?
	foreignEntityId	String?
	actionData	String?
}


model Delegation {
	id	Int	@default(autoincrement())	@id
	search	String?
	fromId	Int
	from	Manager	@relation("From-Delegation.from", fields: [fromId], references: [id])
	toId	Int
	to	Manager	@relation("From-Delegation.to", fields: [toId], references: [id])
	expiresAt	DateTime?	@db.Date
	active	Boolean
}


model File {
	id	Int	@default(autoincrement())	@id
	search	String?
	originalName	String
	url	String
	mimetype	String
	s3Key	String
	eTag	String
}


model Language {
	id	String	@id
	search	String?
	title	String?
	managerLanguages	Manager[]	@relation("From-Manager.language")
}


model AppLogin {
	id	Int	@default(autoincrement())	@id
	search	String?
	login	String
	passwordHash	String
	userId	Int
	user	User	@relation("From-AppLogin.user", fields: [userId], references: [id])
	@@unique([login])
}


model Manager {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	lastName	String
	firstName	String
	languageId	String?
	language	Language?	@relation("From-Manager.language", fields: [languageId], references: [id])
	email	String?
	telegramLogin	String?
	unitId	Int?
	unit	Unit?	@relation("From-Manager.unit", fields: [unitId], references: [id])
	headOfUnit	Boolean
	active	Boolean
	auditLogManagers	AuditLog[]	@relation("From-AuditLog.manager")
	delegationFroms	Delegation[]	@relation("From-Delegation.from")
	delegationTos	Delegation[]	@relation("From-Delegation.to")
	managerLoginManagers	ManagerLogin[]	@relation("From-ManagerLogin.manager")
	managersToPermissionManagers	ManagersToPermission[]	@relation("From-ManagersToPermission.manager")
	managersToRoleManagers	ManagersToRole[]	@relation("From-ManagersToRole.manager")
	@@unique([email])
}


model ManagerLogin {
	id	Int	@default(autoincrement())	@id
	search	String?
	login	String
	passwordHash	String
	role	String
	emailVerified	Boolean
	initialPasswordChanged	Boolean
	locked	Boolean
	managerId	Int
	manager	Manager	@relation("From-ManagerLogin.manager", fields: [managerId], references: [id])
	@@unique([login])
}


model ManagersToPermission {
	id	Int	@default(autoincrement())	@id
	search	String?
	managerId	Int
	manager	Manager	@relation("From-ManagersToPermission.manager", fields: [managerId], references: [id])
	permissionId	String
	permission	Permission	@relation("From-ManagersToPermission.permission", fields: [permissionId], references: [id])
}


model ManagersToRole {
	id	Int	@default(autoincrement())	@id
	search	String?
	managerId	Int
	manager	Manager	@relation("From-ManagersToRole.manager", fields: [managerId], references: [id])
	roleId	String
	role	Role	@relation("From-ManagersToRole.role", fields: [roleId], references: [id])
	@@unique([managerId, roleId])
}


model Permission {
	id	String	@id
	search	String?
	title	String?
	managersToPermissionPermissions	ManagersToPermission[]	@relation("From-ManagersToPermission.permission")
	rolesToPermissionPermissions	RolesToPermission[]	@relation("From-RolesToPermission.permission")
}


model Role {
	id	String	@id
	search	String?
	title	String?
	hasFullAccess	Boolean?
	managersToRoleRoles	ManagersToRole[]	@relation("From-ManagersToRole.role")
	rolesToPermissionRoles	RolesToPermission[]	@relation("From-RolesToPermission.role")
}


model RolesToPermission {
	id	Int	@default(autoincrement())	@id
	search	String?
	roleId	String
	role	Role	@relation("From-RolesToPermission.role", fields: [roleId], references: [id])
	permissionId	String
	permission	Permission	@relation("From-RolesToPermission.permission", fields: [permissionId], references: [id])
	@@unique([roleId, permissionId])
}


model Stat {
	id	String	@id
	search	String?
	updated	DateTime?
	helloCount	Int?
}


model Tag {
	id	Int	@default(autoincrement())	@id
	search	String?
	comment	String?
}


model Unit {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	parentId	Int?
	parent	Unit?	@relation("From-Unit.parent", fields: [parentId], references: [id])
	managerUnits	Manager[]	@relation("From-Manager.unit")
	unitParents	Unit[]	@relation("From-Unit.parent")
}


model User {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	lastname	String
	firstname	String
	email	String
	appLoginUsers	AppLogin[]	@relation("From-AppLogin.user")
	auditLogUsers	AuditLog[]	@relation("From-AuditLog.user")
}
