generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_MAIN_WRITE_URI")
}

model AppRefreshToken {
	id	Int	@default(autoincrement())	@id
	search	String?
	create	DateTime
	userId	Int
	user	User	@relation("From-AppRefreshToken.user", fields: [userId], references: [id])
	token	String
}


model Language {
	id	String	@id
	search	String?
	title	String?
	mailingMessageLanguages	MailingMessage[]	@relation("From-MailingMessage.language")
	managerLanguages	Manager[]	@relation("From-Manager.language")
	messageTemplateLangVariantLanguages	MessageTemplateLangVariant[]	@relation("From-MessageTemplateLangVariant.language")
}


model ManagerLoginType {
	id	String	@id
	search	String?
	title	String?
	managerLoginManagerLoginTypes	ManagerLogin[]	@relation("From-ManagerLogin.managerLoginType")
}


model Stat {
	id	String	@id
	search	String?
	updated	DateTime?
	helloCount	Int?
}


model Tag {
	id	Int	@default(autoincrement())	@id
	search	String?
	comment	String?
}


model AdmRefreshToken {
	id	Int	@default(autoincrement())	@id
	search	String?
	create	DateTime
	managerId	Int
	manager	Manager	@relation("From-AdmRefreshToken.manager", fields: [managerId], references: [id])
	token	String
}


model WscContact {
	id	Int	@default(autoincrement())	@id
	search	String?
	name	String
	phoneNumber	String
	wscUserId	Int
	wscUser	WscUser	@relation("From-WscContact.wscUser", fields: [wscUserId], references: [id])
	wscMessageWscContacts	WscMessage[]	@relation("From-WscMessage.wscContact")
	@@unique([name, phoneNumber, wscUserId])
}


model WscMessage {
	id	Int	@default(autoincrement())	@id
	search	String?
	externalId	String
	dateTimeRaw	String
	sender	String
	content	String
	wscUserId	Int
	wscUser	WscUser	@relation("From-WscMessage.wscUser", fields: [wscUserId], references: [id])
	wscContactId	Int
	wscContact	WscContact	@relation("From-WscMessage.wscContact", fields: [wscContactId], references: [id])
	@@unique([externalId])
}


model WscUser {
	id	Int	@default(autoincrement())	@id
	search	String?
	login	String
	passwordHash	String
	accessToken	String?
	wscContactWscUsers	WscContact[]	@relation("From-WscContact.wscUser")
	wscMessageWscUsers	WscMessage[]	@relation("From-WscMessage.wscUser")
	@@unique([login])
	@@unique([accessToken])
}


model PlayerAggregatedRole {
	id	String	@id
	search	String?
	title	String
	playerRolePlayerAggregatedRoles	PlayerRole[]	@relation("From-PlayerRole.playerAggregatedRole")
	playerPlayerAggregatedRoles	Player[]	@relation("From-Player.playerAggregatedRole")
}


model AuditLog {
	id	Int	@default(autoincrement())	@id
	search	String?
	date	DateTime
	title	String
	success	Boolean?
	error	String?
	entityTypeId	String
	entityType	Entity	@relation("From-AuditLog.entityType", fields: [entityTypeId], references: [id])
	entityId	String
	actionTypeId	String
	actionType	AuditLogActionType	@relation("From-AuditLog.actionType", fields: [actionTypeId], references: [id])
	managerId	Int?
	manager	Manager?	@relation("From-AuditLog.manager", fields: [managerId], references: [id])
	managerLogin	String?
	userId	Int?
	user	User?	@relation("From-AuditLog.user", fields: [userId], references: [id])
	foreign	Boolean?
	foreignEntityType	String?
	foreignEntityId	String?
	actionData	Json?
}


model MatchVideo {
	id	Int	@default(autoincrement())	@id
	search	String?
	videoTitle	String
	videoLink	String
	matchId	Int?
	match	Match?	@relation("From-MatchVideo.match", fields: [matchId], references: [id])
	order	Int?
	eventVideos	Event[]	@relation("From-Event.video")
	matchPeriodMarkupMatchVideos	MatchPeriodMarkup[]	@relation("From-MatchPeriodMarkup.matchVideo")
}


model Glossary {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	description	String
	periodTypeId	String
	periodType	PeriodType	@relation("From-Glossary.periodType", fields: [periodTypeId], references: [id])
}


model Delegation {
	id	Int	@default(autoincrement())	@id
	search	String?
	fromId	Int
	from	Manager	@relation("From-Delegation.from", fields: [fromId], references: [id])
	toId	Int
	to	Manager	@relation("From-Delegation.to", fields: [toId], references: [id])
	expiresAt	DateTime?	@db.Date
	active	Boolean
}


model PlayerForMatchRequest {
	id	Int	@default(autoincrement())	@id
	search	String?
	matchRequestId	Int
	matchRequest	MatchRequest	@relation("From-PlayerForMatchRequest.matchRequest", fields: [matchRequestId], references: [id])
	playerId	Int
	player	Player	@relation("From-PlayerForMatchRequest.player", fields: [playerId], references: [id])
	@@unique([matchRequestId, playerId])
}


model MatchRequest {
	id	Int	@default(autoincrement())	@id
	search	String?
	matchId	Int
	match	Match	@relation("From-MatchRequest.match", fields: [matchId], references: [id])
	teamForCompetitionId	Int
	teamForCompetition	TeamForCompetition	@relation("From-MatchRequest.teamForCompetition", fields: [teamForCompetitionId], references: [id])
	playerForMatchRequestMatchRequests	PlayerForMatchRequest[]	@relation("From-PlayerForMatchRequest.matchRequest")
	@@unique([matchId, teamForCompetitionId])
}


model Player {
	id	Int	@default(autoincrement())	@id
	search	String?
	firstname	String
	lastname	String
	patronymic	String?
	title	String
	playerName	String?
	number	Int
	dateOfBirth	DateTime	@db.Date
	age	Int?
	teamId	Int?
	team	Team?	@relation("From-Player.team", fields: [teamId], references: [id])
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Player.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Player.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	parentId	Int?
	parent	Parent?	@relation("From-Player.parent", fields: [parentId], references: [id])
	linkToProfile	String?
	playerRating	Int?
	photoId	Int?
	photo	File?	@relation("From-Player.photo", fields: [photoId], references: [id])
	playerRatingAverage	Float?
	commonPlayerRatingGoalkeeper	Int?
	commonPlayerRatingAttack	Int?
	commonPlayerRatingMidfielder	Int?
	commonPlayerRatingDefender	Int?
	playedMatches	Int?
	averagePlayerRatingGoalkeeper	Float?
	averagePlayerRatingAttack	Float?
	averagePlayerRatingMidfielder	Float?
	averagePlayerRatingDefender	Float?
	playerAggregatedRoleId	String?
	playerAggregatedRole	PlayerAggregatedRole?	@relation("From-Player.playerAggregatedRole", fields: [playerAggregatedRoleId], references: [id])
	playerTag	String?
	progressivePassAccuracy	Float?
	playerRankId	String?
	playerRank	PlayerRank?	@relation("From-Player.playerRank", fields: [playerRankId], references: [id])
	eventMainPlayers	Event[]	@relation("From-Event.mainPlayer")
	eventSecondPlayers	Event[]	@relation("From-Event.secondPlayer")
	historyOfPlayerRolePlayers	HistoryOfPlayerRole[]	@relation("From-HistoryOfPlayerRole.player")
	playerCompetitionRatingPlayers	PlayerCompetitionRating[]	@relation("From-PlayerCompetitionRating.player")
	playerForCompetitionTeamPlayers	PlayerForCompetitionTeam[]	@relation("From-PlayerForCompetitionTeam.player")
	playerForMatchRequestPlayers	PlayerForMatchRequest[]	@relation("From-PlayerForMatchRequest.player")
	playerForTeamMatchListPlayers	PlayerForTeamMatchList[]	@relation("From-PlayerForTeamMatchList.player")
	playerMatchRatingPlayers	PlayerMatchRating[]	@relation("From-PlayerMatchRating.player")
	reportForParentPlayers	ReportForParent[]	@relation("From-ReportForParent.player")
	teamForPlayerPlayers	TeamForPlayer[]	@relation("From-TeamForPlayer.player")
}


model PlayerForTeamMatchList {
	id	Int	@default(autoincrement())	@id
	search	String?
	teamMatchListId	Int
	teamMatchList	TeamMatchList	@relation("From-PlayerForTeamMatchList.teamMatchList", fields: [teamMatchListId], references: [id])
	playerId	Int
	player	Player	@relation("From-PlayerForTeamMatchList.player", fields: [playerId], references: [id])
	startingPosition	Boolean?
	onField	Boolean?
	playerRoleId	String
	playerRole	PlayerRole	@relation("From-PlayerForTeamMatchList.playerRole", fields: [playerRoleId], references: [id])
	playerOnMatchNumber	Int?
	@@unique([playerId, teamMatchListId])
}


model TeamForPlayer {
	id	Int	@default(autoincrement())	@id
	search	String?
	playerId	Int
	player	Player	@relation("From-TeamForPlayer.player", fields: [playerId], references: [id])
	teamId	Int
	team	Team	@relation("From-TeamForPlayer.team", fields: [teamId], references: [id])
	@@unique([playerId, teamId])
}


model AutogenerationHistoryEntry {
	id	Int	@default(autoincrement())	@id
	search	String?
	date	DateTime
	originalEntityType	String
	originalEntityId	String
	autogenerationRuleId	String
	autogenerationRule	AutogenerationRule	@relation("From-AutogenerationHistoryEntry.autogenerationRule", fields: [autogenerationRuleId], references: [id])
	version	DateTime	@db.Date
	errorOccurred	Boolean
	error	String?
}


model HistoryOfPlayerRole {
	id	Int	@default(autoincrement())	@id
	search	String?
	matchId	Int
	match	Match	@relation("From-HistoryOfPlayerRole.match", fields: [matchId], references: [id])
	playerId	Int
	player	Player	@relation("From-HistoryOfPlayerRole.player", fields: [playerId], references: [id])
	playerRoleId	String
	playerRole	PlayerRole	@relation("From-HistoryOfPlayerRole.playerRole", fields: [playerRoleId], references: [id])
	status	Boolean?
	order	Int
}


model EventTypeCategory {
	id	String	@id
	search	String?
	title	String
	eventTypeEventTypeCategories	EventType[]	@relation("From-EventType.eventTypeCategory")
}


model Club {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Club.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Club.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	reportForClubClubs	ReportForClub[]	@relation("From-ReportForClub.club")
	reportForTeamClubs	ReportForTeam[]	@relation("From-ReportForTeam.club")
	teamClubs	Team[]	@relation("From-Team.club")
}


model TeamMatchReport {
	id	Int	@default(autoincrement())	@id
	search	String?
	created	DateTime
	matchId	Int
	match	Match	@relation("From-TeamMatchReport.match", fields: [matchId], references: [id])
	lastUpdated	DateTime?	@db.Date
	fileId	Int?
	file	File?	@relation("From-TeamMatchReport.file", fields: [fileId], references: [id])
	needRecalculate	Boolean?	@default(false)
	@@unique([matchId])
}


model Team {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	dateOfBirthFrom	Int
	dateOfBirthTo	Int?
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Team.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Team.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	clubId	Int
	club	Club	@relation("From-Team.club", fields: [clubId], references: [id])
	fileId	Int?
	file	File?	@relation("From-Team.file", fields: [fileId], references: [id])
	playerTeams	Player[]	@relation("From-Player.team")
	reportForClubTeams	ReportForClub[]	@relation("From-ReportForClub.team")
	teamForCompetitionTeams	TeamForCompetition[]	@relation("From-TeamForCompetition.team")
	teamForPlayerTeams	TeamForPlayer[]	@relation("From-TeamForPlayer.team")
}


model TeamForCompetition {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	fullTitle	String?
	teamId	Int
	team	Team	@relation("From-TeamForCompetition.team", fields: [teamId], references: [id])
	competitionId	Int
	competition	Competition	@relation("From-TeamForCompetition.competition", fields: [competitionId], references: [id])
	eventTeamForCompetitions	Event[]	@relation("From-Event.teamForCompetition")
	matchRequestTeamForCompetitions	MatchRequest[]	@relation("From-MatchRequest.teamForCompetition")
	matchFirstTeams	Match[]	@relation("From-Match.firstTeam")
	matchFirstTeamOnFields	Match[]	@relation("From-Match.firstTeamOnField")
	matchSecondTeams	Match[]	@relation("From-Match.secondTeam")
	playerForCompetitionTeamTeamForCompetitions	PlayerForCompetitionTeam[]	@relation("From-PlayerForCompetitionTeam.teamForCompetition")
	reportForTeamTeamForCompetitions	ReportForTeam[]	@relation("From-ReportForTeam.teamForCompetition")
	teamMatchListTeamForCompetitions	TeamMatchList[]	@relation("From-TeamMatchList.teamForCompetition")
	@@unique([title, competitionId])
}


model ConfigurationVariable {
	id	String	@id
	value	Json
}


model ManagerLogin {
	id	Int	@default(autoincrement())	@id
	search	String?
	managerLoginTypeId	String
	managerLoginType	ManagerLoginType	@relation("From-ManagerLogin.managerLoginType", fields: [managerLoginTypeId], references: [id])
	login	String
	passwordHash	String?
	emailVerified	Boolean?
	locked	Boolean
	managerId	Int
	manager	Manager	@relation("From-ManagerLogin.manager", fields: [managerId], references: [id])
	@@unique([managerLoginTypeId, login])
}


model AppLogin {
	id	Int	@default(autoincrement())	@id
	search	String?
	login	String
	passwordHash	String
	userId	Int
	user	User	@relation("From-AppLogin.user", fields: [userId], references: [id])
	@@unique([login])
}


model Match {
	id	Int	@default(autoincrement())	@id
	search	String?
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Match.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Match.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	title	String
	competitionId	Int
	competition	Competition	@relation("From-Match.competition", fields: [competitionId], references: [id])
	firstTeamId	Int?
	firstTeam	TeamForCompetition?	@relation("From-Match.firstTeam", fields: [firstTeamId], references: [id])
	firstTeamColor	String?
	firstTeamOnFieldId	Int?
	firstTeamOnField	TeamForCompetition?	@relation("From-Match.firstTeamOnField", fields: [firstTeamOnFieldId], references: [id])
	secondTeamId	Int?
	secondTeam	TeamForCompetition?	@relation("From-Match.secondTeam", fields: [secondTeamId], references: [id])
	secondTeamColor	String?
	matchDate	DateTime	@db.Date
	matchTime	String
	duration	Int
	place	String?
	active	Boolean?
	firstTeamPoints	Int?
	secondTeamPoints	Int?
	redCardFirstTeam	Int?
	redCardSecondTeam	Int?
	yellowCardFirstTeam	Int?
	yellowCardSecondTeam	Int?
	firstTeamHandleTime	Int?
	secondTeamHandleTime	Int?
	linkToProtocol	String?
	matchStatusId	String?	@default("created")
	matchStatus	MatchStatus?	@relation("From-Match.matchStatus", fields: [matchStatusId], references: [id])
	eventMatches	Event[]	@relation("From-Event.match")
	historyOfPlayerRoleMatches	HistoryOfPlayerRole[]	@relation("From-HistoryOfPlayerRole.match")
	matchRequestMatches	MatchRequest[]	@relation("From-MatchRequest.match")
	matchVideoMatches	MatchVideo[]	@relation("From-MatchVideo.match")
	playerMatchRatingMatches	PlayerMatchRating[]	@relation("From-PlayerMatchRating.match")
	reportForParentMatches	ReportForParent[]	@relation("From-ReportForParent.match")
	reportForTeamMatches	ReportForTeam[]	@relation("From-ReportForTeam.match")
	teamMatchListMatches	TeamMatchList[]	@relation("From-TeamMatchList.match")
	teamMatchReportMatches	TeamMatchReport[]	@relation("From-TeamMatchReport.match")
	@@unique([firstTeamId, secondTeamId, matchDate, matchTime])
}


model Manager {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	lastName	String
	firstName	String
	languageId	String?
	language	Language?	@relation("From-Manager.language", fields: [languageId], references: [id])
	email	String
	phone	String?
	photoId	Int?
	photo	File?	@relation("From-Manager.photo", fields: [photoId], references: [id])
	telegramLogin	String?
	unitId	Int?
	unit	Unit?	@relation("From-Manager.unit", fields: [unitId], references: [id])
	headOfUnit	Boolean
	active	Boolean
	tenantId	Int?
	tenant	Tenant?	@relation("From-Manager.tenant", fields: [tenantId], references: [id])
	admRefreshTokenManagers	AdmRefreshToken[]	@relation("From-AdmRefreshToken.manager")
	auditLogManagers	AuditLog[]	@relation("From-AuditLog.manager")
	clubCreatedByManagers	Club[]	@relation("From-Club.createdByManager")
	clubLastChangedByManagers	Club[]	@relation("From-Club.lastChangedByManager")
	competitionCreatedByManagers	Competition[]	@relation("From-Competition.createdByManager")
	competitionLastChangedByManagers	Competition[]	@relation("From-Competition.lastChangedByManager")
	delegationFroms	Delegation[]	@relation("From-Delegation.from")
	delegationTos	Delegation[]	@relation("From-Delegation.to")
	managerLoginManagers	ManagerLogin[]	@relation("From-ManagerLogin.manager")
	managersToPermissionManagers	ManagersToPermission[]	@relation("From-ManagersToPermission.manager")
	managersToRoleManagers	ManagersToRole[]	@relation("From-ManagersToRole.manager")
	matchCreatedByManagers	Match[]	@relation("From-Match.createdByManager")
	matchLastChangedByManagers	Match[]	@relation("From-Match.lastChangedByManager")
	organizatorCreatedByManagers	Organizator[]	@relation("From-Organizator.createdByManager")
	organizatorLastChangedByManagers	Organizator[]	@relation("From-Organizator.lastChangedByManager")
	parentCreatedByManagers	Parent[]	@relation("From-Parent.createdByManager")
	parentLastChangedByManagers	Parent[]	@relation("From-Parent.lastChangedByManager")
	playerCreatedByManagers	Player[]	@relation("From-Player.createdByManager")
	playerLastChangedByManagers	Player[]	@relation("From-Player.lastChangedByManager")
	teamCreatedByManagers	Team[]	@relation("From-Team.createdByManager")
	teamLastChangedByManagers	Team[]	@relation("From-Team.lastChangedByManager")
	@@unique([email])
}


model Organizator {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Organizator.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Organizator.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	competitionOrganizations	Competition[]	@relation("From-Competition.organization")
	reportForOrganizationOrganizators	ReportForOrganization[]	@relation("From-ReportForOrganization.organizator")
}


model AggregateTracking {
	id	Int	@default(autoincrement())	@id
	entityTypeId	String
	entityType	Entity	@relation("From-AggregateTracking.entityType", fields: [entityTypeId], references: [id])
	entityId	String
	lastAggregatesComputed	DateTime
	lastAggregatesScheduled	DateTime?
	lastEntityUpdate	DateTime
	aggregateVersion	Int
	@@unique([entityTypeId, entityId])
}


model EntitiesTracking {
	id	Int	@default(autoincrement())	@id
	search	String?
	entityTypeId	String
	entityType	Entity	@relation("From-EntitiesTracking.entityType", fields: [entityTypeId], references: [id])
	entityId	String
	lastEntityComputed	DateTime
	lastEntityScheduled	DateTime?
	lastEntityUpdate	DateTime
	@@unique([entityTypeId, entityId])
}


model ReportForClub {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	teamId	Int
	team	Team	@relation("From-ReportForClub.team", fields: [teamId], references: [id])
	competitionId	Int
	competition	Competition	@relation("From-ReportForClub.competition", fields: [competitionId], references: [id])
	clubId	Int
	club	Club	@relation("From-ReportForClub.club", fields: [clubId], references: [id])
	lastUpdated	DateTime?	@db.Date
	paid	Boolean?
}


model ReportForTeam {
	id	Int	@default(autoincrement())	@id
	search	String?
	created	DateTime
	title	String
	teamForCompetitionId	Int
	teamForCompetition	TeamForCompetition	@relation("From-ReportForTeam.teamForCompetition", fields: [teamForCompetitionId], references: [id])
	matchId	Int
	match	Match	@relation("From-ReportForTeam.match", fields: [matchId], references: [id])
	clubId	Int
	club	Club	@relation("From-ReportForTeam.club", fields: [clubId], references: [id])
	lastUpdated	DateTime?	@db.Date
	paid	Boolean?
	fileId	Int?
	file	File?	@relation("From-ReportForTeam.file", fields: [fileId], references: [id])
	htmlFileId	Int?
	htmlFile	File?	@relation("From-ReportForTeam.htmlFile", fields: [htmlFileId], references: [id])
	jsonFileId	Int?
	jsonFile	File?	@relation("From-ReportForTeam.jsonFile", fields: [jsonFileId], references: [id])
	needRecalculate	Boolean?
}


model ReportForOrganization {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	competitionId	Int
	competition	Competition	@relation("From-ReportForOrganization.competition", fields: [competitionId], references: [id])
	organizatorId	Int
	organizator	Organizator	@relation("From-ReportForOrganization.organizator", fields: [organizatorId], references: [id])
	lastUpdated	DateTime?	@db.Date
	paid	Boolean?
}


model ReportForParent {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	playerId	Int
	player	Player	@relation("From-ReportForParent.player", fields: [playerId], references: [id])
	matchId	Int
	match	Match	@relation("From-ReportForParent.match", fields: [matchId], references: [id])
	parentId	Int
	parent	Parent	@relation("From-ReportForParent.parent", fields: [parentId], references: [id])
	lastUpdated	DateTime?	@db.Date
	paid	Boolean?
}


model Unit {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	parentId	Int?
	parent	Unit?	@relation("From-Unit.parent", fields: [parentId], references: [id])
	managerUnits	Manager[]	@relation("From-Manager.unit")
	unitParents	Unit[]	@relation("From-Unit.parent")
}


model User {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	lastname	String
	firstname	String
	email	String
	tenantId	Int?
	tenant	Tenant?	@relation("From-User.tenant", fields: [tenantId], references: [id])
	appLoginUsers	AppLogin[]	@relation("From-AppLogin.user")
	appRefreshTokenUsers	AppRefreshToken[]	@relation("From-AppRefreshToken.user")
	auditLogUsers	AuditLog[]	@relation("From-AuditLog.user")
}


model AutogenerationRule {
	id	String	@id
	search	String?
	title	String
	version	DateTime?	@db.Date
	originalEntityType	String
	generatingEntityType	String
	originalEntityFilter	String
	generatingEntityConstructionRules	String
	ignoreVersionOnHistory	Boolean
	autogenerationHistoryEntryAutogenerationRules	AutogenerationHistoryEntry[]	@relation("From-AutogenerationHistoryEntry.autogenerationRule")
}


model MatchPeriodMarkup {
	id	Int	@default(autoincrement())	@id
	search	String?
	timestamp	Int?
	periodTypeId	String
	periodType	PeriodType	@relation("From-MatchPeriodMarkup.periodType", fields: [periodTypeId], references: [id])
	matchVideoId	Int?
	matchVideo	MatchVideo?	@relation("From-MatchPeriodMarkup.matchVideo", fields: [matchVideoId], references: [id])
	@@unique([matchVideoId, periodTypeId])
}


model Permission {
	id	String	@id
	search	String?
	title	String?
	managersToPermissionPermissions	ManagersToPermission[]	@relation("From-ManagersToPermission.permission")
	rolesToPermissionPermissions	RolesToPermission[]	@relation("From-RolesToPermission.permission")
}


model ManagersToPermission {
	id	Int	@default(autoincrement())	@id
	search	String?
	managerId	Int
	manager	Manager	@relation("From-ManagersToPermission.manager", fields: [managerId], references: [id])
	permissionId	String
	permission	Permission	@relation("From-ManagersToPermission.permission", fields: [permissionId], references: [id])
	expiresAt	DateTime?	@db.Date
}


model RolesToPermission {
	id	Int	@default(autoincrement())	@id
	search	String?
	roleId	String
	role	Role	@relation("From-RolesToPermission.role", fields: [roleId], references: [id])
	permissionId	String
	permission	Permission	@relation("From-RolesToPermission.permission", fields: [permissionId], references: [id])
	@@unique([roleId, permissionId])
}


model PlayerRank {
	id	String	@id
	search	String?
	title	String
	rating	Int
	fileId	Int?
	file	File?	@relation("From-PlayerRank.file", fields: [fileId], references: [id])
	playerPlayerRanks	Player[]	@relation("From-Player.playerRank")
}


model MailingCampaign {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	mailingTypeId	String
	mailingType	MailingType	@relation("From-MailingCampaign.mailingType", fields: [mailingTypeId], references: [id])
	priority	Int
	date	DateTime?	@db.Date
	mailingCampaignStatusId	String?
	mailingCampaignStatus	MailingCampaignStatus?	@relation("From-MailingCampaign.mailingCampaignStatus", fields: [mailingCampaignStatusId], references: [id])
	messageTemplateId	String
	messageTemplate	MessageTemplate	@relation("From-MailingCampaign.messageTemplate", fields: [messageTemplateId], references: [id])
	mailingMessageMailingCampaigns	MailingMessage[]	@relation("From-MailingMessage.mailingCampaign")
}


model PlayerCompetitionRating {
	id	Int	@default(autoincrement())	@id
	search	String?
	competitionId	Int
	competition	Competition	@relation("From-PlayerCompetitionRating.competition", fields: [competitionId], references: [id])
	playerId	Int
	player	Player	@relation("From-PlayerCompetitionRating.player", fields: [playerId], references: [id])
	rating	Int
}


model PlayerMatchRating {
	id	Int	@default(autoincrement())	@id
	search	String?
	matchId	Int
	match	Match	@relation("From-PlayerMatchRating.match", fields: [matchId], references: [id])
	playerId	Int
	player	Player	@relation("From-PlayerMatchRating.player", fields: [playerId], references: [id])
	rating	Int
	progressivePassAccuracy	Float?
	playerRatingAverage	Float?
}


model Parent {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	firstname	String
	lastname	String
	patronymic	String?
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Parent.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Parent.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	playerParents	Player[]	@relation("From-Player.parent")
	reportForParentParents	ReportForParent[]	@relation("From-ReportForParent.parent")
}


model Role {
	id	String	@id
	search	String?
	title	String?
	hasAllPermissions	Boolean
	allTenantsAvailable	Boolean
	managersToRoleRoles	ManagersToRole[]	@relation("From-ManagersToRole.role")
	rolesToPermissionRoles	RolesToPermission[]	@relation("From-RolesToPermission.role")
}


model PlayerRole {
	id	String	@id
	search	String?
	title	String
	shortTitle	String
	playerAggregatedRoleId	String
	playerAggregatedRole	PlayerAggregatedRole	@relation("From-PlayerRole.playerAggregatedRole", fields: [playerAggregatedRoleId], references: [id])
	eventFirstPlayerRoles	Event[]	@relation("From-Event.firstPlayerRole")
	eventSecondPlayerRoles	Event[]	@relation("From-Event.secondPlayerRole")
	historyOfPlayerRolePlayerRoles	HistoryOfPlayerRole[]	@relation("From-HistoryOfPlayerRole.playerRole")
	playerForTeamMatchListPlayerRoles	PlayerForTeamMatchList[]	@relation("From-PlayerForTeamMatchList.playerRole")
}


model ManagersToRole {
	id	Int	@default(autoincrement())	@id
	search	String?
	managerId	Int
	manager	Manager	@relation("From-ManagersToRole.manager", fields: [managerId], references: [id])
	roleId	String
	role	Role	@relation("From-ManagersToRole.role", fields: [roleId], references: [id])
	expiresAt	DateTime?	@db.Date
	@@unique([managerId, roleId, expiresAt])
}


model Event {
	id	Int	@default(autoincrement())	@id
	date	DateTime
	search	String?
	timeSecond	Int?
	linkToTimeSecond	String?
	controversialPoint	Boolean?
	startControversialPoint	Int?
	highlight	Boolean?
	startHighlight	Int?
	order	Int
	eventTypeId	String
	eventType	EventType	@relation("From-Event.eventType", fields: [eventTypeId], references: [id])
	videoId	Int?
	video	MatchVideo?	@relation("From-Event.video", fields: [videoId], references: [id])
	teamForCompetitionId	Int?
	teamForCompetition	TeamForCompetition?	@relation("From-Event.teamForCompetition", fields: [teamForCompetitionId], references: [id])
	mainPlayerId	Int?
	mainPlayer	Player?	@relation("From-Event.mainPlayer", fields: [mainPlayerId], references: [id])
	secondPlayerId	Int?
	secondPlayer	Player?	@relation("From-Event.secondPlayer", fields: [secondPlayerId], references: [id])
	firstPlayerRoleId	String?
	firstPlayerRole	PlayerRole?	@relation("From-Event.firstPlayerRole", fields: [firstPlayerRoleId], references: [id])
	secondPlayerRoleId	String?
	secondPlayerRole	PlayerRole?	@relation("From-Event.secondPlayerRole", fields: [secondPlayerRoleId], references: [id])
	periodTypeId	String?
	periodType	PeriodType?	@relation("From-Event.periodType", fields: [periodTypeId], references: [id])
	matchId	Int
	match	Match	@relation("From-Event.match", fields: [matchId], references: [id])
	points	Int
	periodNumber	Int?
}


model MailingMessage {
	id	Int	@default(autoincrement())	@id
	search	String?
	mailingCampaignId	Int
	mailingCampaign	MailingCampaign	@relation("From-MailingMessage.mailingCampaign", fields: [mailingCampaignId], references: [id])
	templateId	String
	template	MessageTemplate	@relation("From-MailingMessage.template", fields: [templateId], references: [id])
	languageId	String
	language	Language	@relation("From-MailingMessage.language", fields: [languageId], references: [id])
	to	String
	locals	String
	localsHash	String
	priority	Int
	dateCreated	DateTime
	dateSent	DateTime?
	error	String?
	html	String?
	text	String?
	uniqueKey	String?
	subject	String?
	mailingMessageStatusId	String
	mailingMessageStatus	MailingMessageStatus	@relation("From-MailingMessage.mailingMessageStatus", fields: [mailingMessageStatusId], references: [id])
	messageTemplateLangVariantId	Int
	messageTemplateLangVariant	MessageTemplateLangVariant	@relation("From-MailingMessage.messageTemplateLangVariant", fields: [messageTemplateLangVariantId], references: [id])
	@@unique([mailingCampaignId, to, uniqueKey])
}


model TeamMatchList {
	id	Int	@default(autoincrement())	@id
	search	String?
	matchId	Int
	match	Match	@relation("From-TeamMatchList.match", fields: [matchId], references: [id])
	teamForCompetitionId	Int
	teamForCompetition	TeamForCompetition	@relation("From-TeamMatchList.teamForCompetition", fields: [teamForCompetitionId], references: [id])
	playerForTeamMatchListTeamMatchLists	PlayerForTeamMatchList[]	@relation("From-PlayerForTeamMatchList.teamMatchList")
	@@unique([matchId, teamForCompetitionId])
}


model PlayerForCompetitionTeam {
	id	Int	@default(autoincrement())	@id
	search	String?
	teamForCompetitionId	Int
	teamForCompetition	TeamForCompetition	@relation("From-PlayerForCompetitionTeam.teamForCompetition", fields: [teamForCompetitionId], references: [id])
	playerId	Int
	player	Player	@relation("From-PlayerForCompetitionTeam.player", fields: [playerId], references: [id])
	@@unique([teamForCompetitionId, playerId])
}


model MailingCampaignStatus {
	id	String	@id
	search	String?
	title	String
	mailingCampaignMailingCampaignStatuses	MailingCampaign[]	@relation("From-MailingCampaign.mailingCampaignStatus")
}


model MatchStatus {
	id	String	@id
	search	String?
	title	String
	matchMatchStatuses	Match[]	@relation("From-Match.matchStatus")
}


model MailingMessageStatus {
	id	String	@id
	search	String?
	title	String?
	final	Boolean
	mailingMessageMailingMessageStatuses	MailingMessage[]	@relation("From-MailingMessage.mailingMessageStatus")
}


model TemplateStyle {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	style	String
	messageTemplateTemplateStyles	MessageTemplate[]	@relation("From-MessageTemplate.templateStyle")
}


model Entity {
	id	String	@id
	search	String?
	title	String?
	aggregateTrackingEntityTypes	AggregateTracking[]	@relation("From-AggregateTracking.entityType")
	auditLogEntityTypes	AuditLog[]	@relation("From-AuditLog.entityType")
	entitiesTrackingEntityTypes	EntitiesTracking[]	@relation("From-EntitiesTracking.entityType")
}


model Tenant {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	utcOffset	Int	@default(0)
	managerTenants	Manager[]	@relation("From-Manager.tenant")
	userTenants	User[]	@relation("From-User.tenant")
}


model PeriodType {
	id	String	@id
	search	String?
	title	String
	order	Int
	eventPeriodTypes	Event[]	@relation("From-Event.periodType")
	glossaryPeriodTypes	Glossary[]	@relation("From-Glossary.periodType")
	matchPeriodMarkupPeriodTypes	MatchPeriodMarkup[]	@relation("From-MatchPeriodMarkup.periodType")
}


model MailingType {
	id	String	@id
	search	String?
	title	String
	mailingCampaignMailingTypes	MailingCampaign[]	@relation("From-MailingCampaign.mailingType")
}


model EventType {
	id	String	@id
	search	String?
	title	String
	points	Int
	eventTypeCategoryId	String?
	eventTypeCategory	EventTypeCategory?	@relation("From-EventType.eventTypeCategory", fields: [eventTypeCategoryId], references: [id])
	order	Int?	@default(0)
	showInTranslationMode	Boolean?
	needForSecondPlayer	Boolean?
	dependsOnPoint	Boolean?
	redCard	Boolean?
	yellowCard	Boolean?
	calculateBlock	Boolean?
	calculateTakeaway	Boolean?
	calculateSelection	Boolean?
	calculateInterseption	Boolean?
	calculateGuardian	Boolean?
	calculatePositionError	Boolean?
	calculateGrossError	Boolean?
	calculatePositiveDribling	Boolean?
	calculateNegativeDribling	Boolean?
	calculatePositiveSgm	Boolean?
	calculateNegativeSgm	Boolean?
	calculatePositiveRgm	Boolean?
	calculateNegativeRgm	Boolean?
	calculateLosses	Boolean?
	calculateGegenPressing	Boolean?
	calculatePressing	Boolean?
	calculateSaveBall	Boolean?
	calculatePositiveTransfer	Boolean?
	calculateNegativeTransfer	Boolean?
	calculateHit	Boolean?
	calculateHitTarget	Boolean?
	calculateCorner	Boolean?
	calculateFoul	Boolean?
	calculateOffside	Boolean?
	eventEventTypes	Event[]	@relation("From-Event.eventType")
}


model AuditLogActionType {
	id	String	@id
	search	String?
	title	String?
	auditLogActionTypes	AuditLog[]	@relation("From-AuditLog.actionType")
}


model MessageType {
	id	String	@id
	search	String?
	title	String
	description	String?
	messageTemplateMessageTypes	MessageTemplate[]	@relation("From-MessageTemplate.messageType")
}


model Competition {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String
	dateOfBirthFrom	Int?
	dateOfBirthTo	Int?
	organizationId	Int
	organization	Organizator	@relation("From-Competition.organization", fields: [organizationId], references: [id])
	createdByManagerId	Int
	createdByManager	Manager	@relation("From-Competition.createdByManager", fields: [createdByManagerId], references: [id])
	lastChangedByManagerId	Int?
	lastChangedByManager	Manager?	@relation("From-Competition.lastChangedByManager", fields: [lastChangedByManagerId], references: [id])
	matchCompetitions	Match[]	@relation("From-Match.competition")
	playerCompetitionRatingCompetitions	PlayerCompetitionRating[]	@relation("From-PlayerCompetitionRating.competition")
	reportForClubCompetitions	ReportForClub[]	@relation("From-ReportForClub.competition")
	reportForOrganizationCompetitions	ReportForOrganization[]	@relation("From-ReportForOrganization.competition")
	teamForCompetitionCompetitions	TeamForCompetition[]	@relation("From-TeamForCompetition.competition")
}


model File {
	id	Int	@default(autoincrement())	@id
	search	String?
	originalName	String
	url	String
	mimetype	String
	s3Key	String
	eTag	String
	bytes	Int?
	managerPhotos	Manager[]	@relation("From-Manager.photo")
	playerRankFiles	PlayerRank[]	@relation("From-PlayerRank.file")
	playerPhotos	Player[]	@relation("From-Player.photo")
	reportForTeamFiles	ReportForTeam[]	@relation("From-ReportForTeam.file")
	reportForTeamHtmlFiles	ReportForTeam[]	@relation("From-ReportForTeam.htmlFile")
	reportForTeamJsonFiles	ReportForTeam[]	@relation("From-ReportForTeam.jsonFile")
	teamMatchReportFiles	TeamMatchReport[]	@relation("From-TeamMatchReport.file")
	teamFiles	Team[]	@relation("From-Team.file")
}


model MessageTemplate {
	id	String	@id
	search	String?
	title	String
	secretData	Boolean
	messageTypeId	String
	messageType	MessageType	@relation("From-MessageTemplate.messageType", fields: [messageTypeId], references: [id])
	dataExample	String?
	templateStyleId	Int?
	templateStyle	TemplateStyle?	@relation("From-MessageTemplate.templateStyle", fields: [templateStyleId], references: [id])
	mailingCampaignMessageTemplates	MailingCampaign[]	@relation("From-MailingCampaign.messageTemplate")
	mailingMessageTemplates	MailingMessage[]	@relation("From-MailingMessage.template")
	messageTemplateLangVariantMessageTemplates	MessageTemplateLangVariant[]	@relation("From-MessageTemplateLangVariant.messageTemplate")
}


model MessageTemplateLangVariant {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	subjectTemplate	String
	bodyTemplate	String
	messageTemplateId	String
	messageTemplate	MessageTemplate	@relation("From-MessageTemplateLangVariant.messageTemplate", fields: [messageTemplateId], references: [id])
	languageId	String
	language	Language	@relation("From-MessageTemplateLangVariant.language", fields: [languageId], references: [id])
	additionalStyle	String?
	mailingMessageMessageTemplateLangVariants	MailingMessage[]	@relation("From-MailingMessage.messageTemplateLangVariant")
	@@unique([messageTemplateId, languageId])
}
