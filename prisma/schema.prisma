generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url               = env("AGR_PG_URI")
}

model File {
	id	Int	@default(autoincrement())	@id
	search	String?
	originalName	String
	url	String
	mimetype	String
	s3Key	String
	eTag	String
}


model User {
	id	Int	@default(autoincrement())	@id
	search	String?
	lastname	String
	firstname	String
	email	String
	appLoginUsers	AppLogin[]	@relation("From-AppLogin.user")
}


model AppLogin {
	id	Int	@default(autoincrement())	@id
	search	String?
	login	String
	passwordHash	String
	userId	Int
	user	User	@relation("From-AppLogin.user", fields: [userId], references: [id])
	@@unique([login])
}


model Manager {
	id	Int	@default(autoincrement())	@id
	search	String?
	lastName	String
	firstName	String
	title	String?
	managerLoginManagers	ManagerLogin[]	@relation("From-ManagerLogin.manager")
	managersToRoleManages	ManagersToRole[]	@relation("From-ManagersToRole.manage")
}


model ManagerLogin {
	id	Int	@default(autoincrement())	@id
	search	String?
	login	String
	passwordHash	String
	role	String
	emailVerified	Boolean
	initialPasswordChanged	Boolean
	locked	Boolean
	managerId	Int
	manager	Manager	@relation("From-ManagerLogin.manager", fields: [managerId], references: [id])
	@@unique([login])
}


model Role {
	id	String	@id
	search	String?
	title	String?
	hasFullAccess	Boolean?
	rolesToPermissionRoles	RolesToPermission[]	@relation("From-RolesToPermission.role")
	managersToRoleRoles	ManagersToRole[]	@relation("From-ManagersToRole.role")
}


model Permission {
	id	String	@id
	search	String?
	title	String?
	rolesToPermissionPermissions	RolesToPermission[]	@relation("From-RolesToPermission.permission")
}


model RolesToPermission {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	roleId	String
	role	Role	@relation("From-RolesToPermission.role", fields: [roleId], references: [id])
	permissionId	String
	permission	Permission	@relation("From-RolesToPermission.permission", fields: [permissionId], references: [id])
	@@unique([roleId, permissionId])
}


model ManagersToRole {
	id	Int	@default(autoincrement())	@id
	search	String?
	title	String?
	manageId	Int
	manage	Manager	@relation("From-ManagersToRole.manage", fields: [manageId], references: [id])
	roleId	String
	role	Role	@relation("From-ManagersToRole.role", fields: [roleId], references: [id])
	@@unique([manageId, roleId])
}


model Stat {
	id	String	@id
	search	String?
	updated	DateTime?
	helloCount	Int?
}


model Tag {
	id	Int	@default(autoincrement())	@id
	search	String?
	comment	String?
}
